#!/usr/bin/env php
<?php
/**
 * Usage: lcars test:annotate:ju2pr < junit.xml
 * Summary: Convert JUnit XML test results to Vim error format
 *
 * NAME
 *   lcars test:annotate:ju2pr -- Convert JUnit XML test results to Vim error format.
 *
 * SYNOPSIS
 *   lcars test:annotate:ju2pr < junit.xml
 *   pest --log-junit >(lcars test:annotate:ju2pr) > /dev/null
 *
 * DESCRIPTION
 *   lcars test:annotate:ju2pr reads JUnit XML test results from standard input and converts them
 *   to GitHub Annotations format.
 *
 *   This can also be used in Vim to populate the error list.
 *
 *     augroup php_pest
 *       autocmd!
 *       autocmd BufRead,BufNewFile *Test.php
 *         \ let &l:makeprg = 'pest --parallel --log-junit >(lcars test:annotate:ju2pr) $* > /dev/null' |
 *         \ let &l:errorformat = '::error file=%f\,line=%l::%m'
 *     augroup END
 *
 *
 * Based on cs2pr:
 *   https://github.com/staabm/annotate-pull-request-from-checkstyle
 */

error_reporting(E_ALL);
ini_set('display_errors', 'stderr');
gc_disable();

$version = '0.0.0-dev';

// options
$colorize = false;
$gracefulWarnings = false;
$noticeAsWarning = false;
$prependFilename = false;
$prependSource = false;
$errorsAsWarnings = false;

// parameters
$params = array();
foreach ($argv as $arg) {
    if (substr($arg, 0, 2) === '--') {
        $option = substr($arg, 2);
        switch ($option) {
        case 'graceful-warnings':
            $gracefulWarnings = true;
            break;
        case 'colorize':
            $colorize = true;
            break;
        case 'prepend-filename':
            $prependFilename = true;
            break;
        case 'prepend-source':
            $prependSource = true;
            break;
        case 'notices-as-warnings':
            $noticeAsWarning = true;
            break;
        case 'errors-as-warnings':
            $errorsAsWarnings = true;
            break;
        default:
            echo "Unknown option ".$option."\n";
            exit(9);
        }
    } else {
        $params[] = $arg;
    }
}

if (count($params) === 1) {
    $xml = stream_get_contents(STDIN);
} elseif (count($params) === 2 && file_exists($params[1])) {
    $xml = file_get_contents($params[1]);
} else {
    echo "cs2pr $version\n";
    echo "Annotate a Github Pull Request based on a Checkstyle XML-report.\n";
    echo "https://github.com/staabm/annotate-pull-request-from-checkstyle\n\n";
    echo "Usage: ". $params[0] ." [OPTION]... <filename>\n";
    echo "\n";
    echo "Supported options:\n";
    echo "  --graceful-warnings   Don't exit with error codes if there are only warnings.\n";
    echo "  --colorize            Colorize the output (still compatible with Github Annotations)\n";
    echo "  --notices-as-warnings Convert notices to warnings (Github does not annotate notices otherwise).\n";
    echo "  --errors-as-warnings  Downgrade errors to warnings.\n";
    echo "  --prepend-filename    Prepend error 'filename' attribute to the message.\n";
    echo "  --prepend-source      Prepend error 'source' attribute to the message.\n";
    exit(9);
}

// enable user error handling
libxml_use_internal_errors(true);

$root = @simplexml_load_string($xml);

if ($root === false) {
    $errors = libxml_get_errors();
    if ($errors) {
        fwrite(STDERR, 'Error: '. rtrim($errors[0]->message).' on line '.$errors[0]->line.', column '.$errors[0]->column ."\n\n");
    } elseif (stripos($xml, '<?xml') !== 0) {
        fwrite(STDERR, 'Error: Expecting xml stream starting with a xml opening tag.' ."\n\n");
    } else {
        fwrite(STDERR, 'Error: Unknown error. Expecting checkstyle formatted xml input.' ."\n\n");
    }
    fwrite(STDERR, $xml);

    exit(2);
}

$exit = 0;

$failures = $root->xpath('//testcase[failure or error]');

foreach ($failures as $testcase) {
    $testName = (string) $testcase['name'];

    // Check for failure first, then error
    $failure = $testcase->failure ?? $testcase->error;

    if ($failure !== null) {
        $failureText = (string) $failure;
        $type = (string) $failure['type'];

        // Extract line number from "at tests/Unit/Models/AccountTest.php:16" pattern
        if (preg_match('/at ([^:]+):(\d+)$/', $failureText, $matches)) {
            $file = explode('::', (string) $testcase['file'])[0];
            $line = (int) $matches[2];
            $error = explode("\n", substr($failureText, strlen($testName)))[0];

            annotateCheck('error', relativePath($file), $line, $error, $colorize);

            if (!$gracefulWarnings) {
                $exit = 1;
            }
        }
    }
}

exit($exit);

/**
 * @param 'error'|'warning' $type
 * @param string $filename
 * @param int $line
 * @param string $message
 * @param boolean $colorize
 */
function annotateCheck($type, $filename, $line, $message, $colorize)
{
    $message = escapeData($message);
    $filename = escapeProperty($filename);

    if ($colorize) {
        echo "\033[".($type==='error' ? '91' : '93')."m\n";
    }
    echo "::{$type} file={$filename},line={$line}::{$message}\n";
    if ($colorize) {
        echo "\033[0m";
    }
}

function relativePath($path)
{
    return str_replace(getcwd().'/', '', $path);
}

function annotateType($type, $noticeAsWarning, $errorsAsWarnings)
{
    $type = strtolower($type);
    if (in_array($type, array('error', 'failure'))) {
        if ($errorsAsWarnings) {
            return 'warning';
        }

        return 'error';
    }
    if (!$noticeAsWarning && in_array($type, array('info', 'notice'))) {
        return 'notice';
    }
    return 'warning';
}

/**
 * @param string $data
 * @return string
 */
function escapeData($data)
{
    // see https://github.com/actions/toolkit/blob/4f7fb6513a355689f69f0849edeb369a4dc81729/packages/core/src/command.ts#L80-L85
    $data = str_replace("%", '%25', $data);
    $data = str_replace("\r", '%0D', $data);
    $data = str_replace("\n", '%0A', $data);

    return $data;
}

/**
 * @param string $property
 * @return string
 */
function escapeProperty($property)
{
    // see https://github.com/actions/toolkit/blob/4f7fb6513a355689f69f0849edeb369a4dc81729/packages/core/src/command.ts#L87-L94
    $property = str_replace("%", '%25', $property);
    $property = str_replace("\r", '%0D', $property);
    $property = str_replace("\n", '%0A', $property);
    $property = str_replace(":", '%3A', $property);
    $property = str_replace(",", '%2C', $property);

    return $property;
}

/**
 * Get the filename only from a filepath. Built to work across windows & linux.
 */
function filenameOnly($filepath)
{
    return basename(str_replace("\\", "/", $filepath));
}
