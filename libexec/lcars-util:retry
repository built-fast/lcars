#!/usr/bin/env bash
# Usage: lcars util:retry
# Summary: Retries a command
#
# NAME
#   lcars util:retry -- retries a command
#
# SYNOPSIS
#   lcars util:retry
#
# DESCRIPTION
#   lcars util:retry retries a command up to a specific numer of times until
#   it exits successfully, with exponential back off.
#
#   $ lcars util:retry 5 echo Hello
#   Hello
#
#   $ lcars util:retry 5 false
#   Retry 1/5 exited 1, retrying in 1 seconds...
#   Retry 2/5 exited 1, retrying in 2 seconds...
#   Retry 3/5 exited 1, retrying in 4 seconds...
#   Retry 4/5 exited 1, retrying in 8 seconds...
#   Retry 5/5 exited 1, no more retries left.
#
# See also:
#   https://gist.github.com/sj26/88e1c6584397bb7c13bd11108a579746

if [[ "$LCARS_DEBUG" ]]; then
  export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}()}] '
  set -x
fi

if [[ -z "$_LCARS_ROOT" ]]; then
  echo "Error: Must run \`${0//*\/lcars-/lcars }' instead."
  exit 1
fi

set -euo pipefail

# Retry a command up to a specific numer of times until it exits successfully,
# with exponential back off.
#
#   $ retry 5 echo Hello
#   Hello
#
#   $ retry 5 false
#   Retry 1/5 exited 1, retrying in 1 seconds...
#   Retry 2/5 exited 1, retrying in 2 seconds...
#   Retry 3/5 exited 1, retrying in 4 seconds...
#   Retry 4/5 exited 1, retrying in 8 seconds...
#   Retry 5/5 exited 1, no more retries left.
#
# https://gist.github.com/sj26/88e1c6584397bb7c13bd11108a579746
retry() {
  local retries="$1" count=0 delay code

  shift

  until "$@"; do
    code=$?

    delay=$((2 ** count))

    count=$((count + 1))

    if [[ "$count" -lt "$retries" ]]; then
      echo "Retry $count/$retries exited $code, retrying in $delay seconds..."

      sleep "$delay"
    else
      echo "Retry $count/$retries exited $code, no more retries left."

      return "$code"
    fi
  done
}

retry "$@"
